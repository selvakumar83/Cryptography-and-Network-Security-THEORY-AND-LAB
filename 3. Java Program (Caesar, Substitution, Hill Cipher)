import java.util.*;

public class CryptoMenu {

    // ===================== 1. Caesar Cipher =====================
    public static String caesarEncrypt(String text, int shift) {
        StringBuilder result = new StringBuilder();
        for (char c : text.toCharArray()) {
            if (Character.isLetter(c)) {
                char base = Character.isUpperCase(c) ? 'A' : 'a';
                result.append((char) ((c - base + shift) % 26 + base));
            } else {
                result.append(c); // non-letters unchanged
            }
        }
        return result.toString();
    }

    public static String caesarDecrypt(String text, int shift) {
        return caesarEncrypt(text, 26 - (shift % 26));
    }

    // ===================== 2. Substitution Cipher =====================
    // Simple substitution with a key mapping Aâ€“Z
    public static String substitutionEncrypt(String text, String key) {
        text = text.toUpperCase();
        StringBuilder result = new StringBuilder();
        for (char c : text.toCharArray()) {
            if (Character.isLetter(c)) {
                result.append(key.charAt(c - 'A'));
            } else {
                result.append(c);
            }
        }
        return result.toString();
    }

    public static String substitutionDecrypt(String text, String key) {
        text = text.toUpperCase();
        StringBuilder result = new StringBuilder();
        for (char c : text.toCharArray()) {
            if (Character.isLetter(c)) {
                int index = key.indexOf(c);
                result.append((char) ('A' + index));
            } else {
                result.append(c);
            }
        }
        return result.toString();
    }

    // ===================== 3. Hill Cipher =====================
    // Example: 2x2 key matrix [[3,3],[2,5]]
    static int[][] keyMatrix = { {3, 3}, {2, 5} };

    public static String hillEncrypt(String text) {
        text = text.toUpperCase().replaceAll("[^A-Z]", "");
        if (text.length() % 2 != 0) text += "X"; // padding

        StringBuilder result = new StringBuilder();
        for (int i = 0; i < text.length(); i += 2) {
            int c1 = text.charAt(i) - 'A';
            int c2 = text.charAt(i + 1) - 'A';

            int r1 = (keyMatrix[0][0]*c1 + keyMatrix[0][1]*c2) % 26;
            int r2 = (keyMatrix[1][0]*c1 + keyMatrix[1][1]*c2) % 26;

            result.append((char) (r1 + 'A'));
            result.append((char) (r2 + 'A'));
        }
        return result.toString();
    }

    // Decryption requires modular inverse of the matrix
    public static String hillDecrypt(String text) {
        int det = keyMatrix[0][0]*keyMatrix[1][1] - keyMatrix[0][1]*keyMatrix[1][0];
        det = (det % 26 + 26) % 26; // positive mod
        int detInv = -1;
        for (int i = 0; i < 26; i++) {
            if ((det * i) % 26 == 1) {
                detInv = i; break;
            }
        }

        // Inverse matrix
        int[][] invKey = new int[2][2];
        invKey[0][0] = keyMatrix[1][1];
        invKey[1][1] = keyMatrix[0][0];
        invKey[0][1] = -keyMatrix[0][1];
        invKey[1][0] = -keyMatrix[1][0];

        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                invKey[i][j] = (invKey[i][j] * detInv) % 26;
                if (invKey[i][j] < 0) invKey[i][j] += 26;
            }
        }

        // Decrypt
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < text.length(); i += 2) {
            int c1 = text.charAt(i) - 'A';
            int c2 = text.charAt(i + 1) - 'A';

            int r1 = (invKey[0][0]*c1 + invKey[0][1]*c2) % 26;
            int r2 = (invKey[1][0]*c1 + invKey[1][1]*c2) % 26;

            result.append((char) (r1 + 'A'));
            result.append((char) (r2 + 'A'));
        }
        return result.toString();
    }

    // ===================== Main Menu =====================
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\n===== CRYPTO MENU =====");
            System.out.println("1. Caesar Cipher");
            System.out.println("2. Substitution Cipher");
            System.out.println("3. Hill Cipher");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();
            sc.nextLine();

            if (choice == 4) break;

            switch (choice) {
                case 1:
                    System.out.print("Enter plaintext: ");
                    String caesarText = sc.nextLine();
                    System.out.print("Enter shift (e.g., 3): ");
                    int shift = sc.nextInt(); sc.nextLine();
                    String caesarEnc = caesarEncrypt(caesarText, shift);
                    System.out.println("Encrypted: " + caesarEnc);
                    System.out.println("Decrypted: " + caesarDecrypt(caesarEnc, shift));
                    break;

                case 2:
                    System.out.print("Enter plaintext: ");
                    String subText = sc.nextLine();
                    System.out.print("Enter substitution key (26 uppercase letters, e.g., QWERTYUIOPASDFGHJKLZXCVBNM): ");
                    String key = sc.nextLine();
                    String subEnc = substitutionEncrypt(subText, key);
                    System.out.println("Encrypted: " + subEnc);
                    System.out.println("Decrypted: " + substitutionDecrypt(subEnc, key));
                    break;

                case 3:
                    System.out.print("Enter plaintext: ");
                    String hillText = sc.nextLine();
                    String hillEnc = hillEncrypt(hillText);
                    System.out.println("Encrypted: " + hillEnc);
                    System.out.println("Decrypted: " + hillDecrypt(hillEnc));
                    break;

                default:
                    System.out.println("Invalid choice!");
            }
        }

        sc.close();
    }
}
