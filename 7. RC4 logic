import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;

public class BlowfishRC4Demo {
    public static void main(String[] args) throws Exception {

        // 1. Generate Blowfish Key (custom key)
        KeyGenerator keyGen = KeyGenerator.getInstance("Blowfish");
        keyGen.init(128); // 32-448 bits allowed; 128-bit for example
        SecretKey secretKey = keyGen.generateKey();

        // Optional: show key in Base64
        String keyBase64 = Base64.getEncoder().encodeToString(secretKey.getEncoded());
        System.out.println("Generated Blowfish Key (Base64): " + keyBase64);

        // 2. Plaintext
        String plaintext = "Hello world";
        System.out.println("Plaintext: " + plaintext);

        // 3. Encrypt using Blowfish
        Cipher cipher = Cipher.getInstance("Blowfish/ECB/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encrypted = cipher.doFinal(plaintext.getBytes());
        String cipherText = Base64.getEncoder().encodeToString(encrypted);
        System.out.println("Encrypted Text (Base64): " + cipherText);

        // 4. Decrypt using same key
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decrypted = cipher.doFinal(Base64.getDecoder().decode(cipherText));
        String decryptedText = new String(decrypted);
        System.out.println("Decrypted Text: " + decryptedText);
    }
}
