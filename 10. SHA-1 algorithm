import java.security.MessageDigest;
import java.util.Base64;
import java.util.Scanner;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

public class SHA1WithEncryption {
    public static void main(String[] args) {
        try (Scanner sc = new Scanner(System.in)) {
            System.out.print("Enter plaintext: ");
            String plaintext = sc.nextLine();

            // --- Step 1: SHA-1 Digest ---
            MessageDigest md = MessageDigest.getInstance("SHA-1");
            byte[] digestBytes = md.digest(plaintext.getBytes("UTF-8"));

            StringBuilder hex = new StringBuilder();
            for (byte b : digestBytes) {
                hex.append(String.format("%02x", b));
            }
            String base64Digest = Base64.getEncoder().encodeToString(digestBytes);

            System.out.println("\n--- SHA-1 Digest ---");
            System.out.println("SHA-1 (hex)   : " + hex.toString());
            System.out.println("SHA-1 (Base64): " + base64Digest);

            // --- Step 2: Encrypt plaintext with AES ---
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(128); // AES-128
            SecretKey secretKey = keyGen.generateKey();

            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes("UTF-8"));
            String encryptedText = Base64.getEncoder().encodeToString(encryptedBytes);

            System.out.println("\n--- Encryption ---");
            System.out.println("Encrypted Text: " + encryptedText);

            // --- Step 3: Decrypt back to plaintext ---
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedText));
            String decryptedText = new String(decryptedBytes, "UTF-8");

            System.out.println("\n--- Decryption ---");
            System.out.println("Decrypted Text: " + decryptedText);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
